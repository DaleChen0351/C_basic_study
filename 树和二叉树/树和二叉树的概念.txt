树和二叉树 
通用概念
		根 没有前驱的
		叶子 没有后继
		森林 指m棵不相交的树的集合
		有序树，节点（子树）和（子树）节点之间不能互换 ， 比如二叉树，必须按照一定的规则插入
		双亲：结点的前驱节点
		孩子：结点的后继结点
		兄弟：
		堂兄弟：
		祖先，即从根到该节点所经分支的所有节点
		子孙 即该节点下层子树中的任一节点

		结点的度：结点挂接的子树个数，（有几个直接后继就是几度）叶子结点
		树的度：所有结点度中的最大值

		结点的层次：从根结点到该结点的层次（根节点算第一层）
		树的深度：指所有结点的层次中的最大值

		一般研究二叉树，利用 《左孩子右兄弟》 表示法可以将一棵多叉树转化成二叉树


二叉树 
	每个结点最多只有两课子树，且左子树和右子树次序不能颠倒。

性质
	度为2的结点树 + 1 = 叶子数量
	满二叉树：要不就有左右子树，要不就都没有
	完全二叉树 除了最后一层外，达到满二叉树，且在最后一层上只缺少右边的若干结点，即只能往左靠
   层数：
   高度：
	


二叉树的遍历  //按照树的递归特性进行遍历
	先序遍历 DLR ： 根     左(左树） 右(右树）
	中序遍历             左根右
	后序遍历            左右根

DFS
	上面三种周游方式都是深度优先算法(depth-first-search)
	深度优先算法是最自然的实现方式是通过递归实现，事实上，大部分树相关的面试问题都可以优先考虑递归
	深度优先的算法往往都可以通过使用 栈数据 结构将递归化为非递归实现

层次周游  BFS
	属于广度优先算法（breadth-first-search)
	一层一层访问，且从左至右


分而治之 分治算法
特征： 
	当分解到一定规模后，容易解决
	且合并之后可以成为原问题的解
	子问题之间不包含共同部分，是相互独立的
分解：将原问题分解为若干子问题，这些子问题都是
解决：
合并

	二分搜索
	大整数乘法
	快速排序
	归并算法

Binary Search Tree
	二分查找树，是二叉树的一种特例，对于二分查找树的任意节点，该节点储存的数值一定比左子树的所有节点的值大，比右节点的所有值都小
	推测：如果采用中序遍历，是不是数据就是从大到小的排列？ Yes
	二分查找树 查找效率 logn 的，当二叉树退化成一个由小到大排列的单链表时，其搜索效率为O(n)
	所以理论上，

平衡二叉树
	一颗二叉树是平衡的，当且仅当左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一颗平衡二叉树 



