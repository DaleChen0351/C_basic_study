
# 动态库的基本概念
	要解决空间浪费和更新困难的问题，就是要把程序的模块相互分割开来，形成独立的文件，而不是链接在一起。
    运行时候链接所需要的函数，就是把整个链接过程推迟到了运行时开始。

# 动态库生成步骤
	1 配置：属性-配置属性-常规-配置类型- 动态库dll
	2 新建.h文件编写导入 导出函数的声明
		导入函数（只能在当前项目内使用）
        int myAdd(int a, int b);

        变量声明
        int a = 0;

        导出函数（可以被外部使用）
		__declspec(dllexport) int mySub(int ,int b)
		{
			myAdd();
		}

	3 重新生成解决方案,, 在解决方案的debug文件夹下生成 生成 lib 和dll两个文件。
			.lib：动态库生成的lib和静态库生成的lib文件不同，动态库中lib中只会存放导出函数的声明，和一些变量的声明。
			.dll：而具体的实现放到dll中。
			.h 文件：理论上即使使用者不包含头文件也可以正常使用动态库，但为了使用方便，最好还是一起提供给使用者。
		也就说，对于静态库生成的lib文件，则包含了函数库的声明以及实现。

# 在新程序中导入动态库
	1  .dll  .lib  .h文件  
	2  #pragma comment(lib, "./mydll.lib")   
	// 需要指定所需的动态库对应的静态库地址。因为系统会根据静态库去自动寻找对应的动态库中的实现。













